using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libassimp"], :libassimp),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/AssimpBuilder/releases/download/v4.1.0-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/assimp.v4.1.0.aarch64-linux-gnu.tar.gz", "e07b6451715062cf07bf176de945d71f70ccc931a4a82f3abc8c54adcc5bb253"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/assimp.v4.1.0.arm-linux-gnueabihf.tar.gz", "2bf61028dc619a7213fa35bce5f0f5a41d8eeb71a006d3ea0756cb4d9702a431"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/assimp.v4.1.0.i686-linux-gnu.tar.gz", "c98127de579eb4969666bdf44f11b42a39ee11b87e6c8affd218f2ce66406a67"),
    Windows(:i686) => ("$bin_prefix/assimp.v4.1.0.i686-w64-mingw32.tar.gz", "dab6ede80aecc4890cd12f32fc778c1565bd054382b438a4a685eab6c401435e"),
    MacOS(:x86_64) => ("$bin_prefix/assimp.v4.1.0.x86_64-apple-darwin14.tar.gz", "6408c90db39b1f62d4283e8168327cb7d7494d7981f9407f6f42398f3532b319"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/assimp.v4.1.0.x86_64-linux-gnu.tar.gz", "965f962979cb4098042eb7e13dd7702817e1fa9e870e6a04b90ced6b35982446"),
    FreeBSD(:x86_64) => ("$bin_prefix/assimp.v4.1.0.x86_64-unknown-freebsd11.1.tar.gz", "f986a8905f1ae2e4699f7dfa37726e87e50fb65fb5b7474f5b8413a0be4045ee"),
    Windows(:x86_64) => ("$bin_prefix/assimp.v4.1.0.x86_64-w64-mingw32.tar.gz", "0299381e5bc8badc0c2b3cb0c8685029a7f0e66859b127feb88057d6e294883a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
